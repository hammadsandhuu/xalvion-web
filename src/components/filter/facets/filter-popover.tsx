"use client"import React from "react"import { useState } from "react"import {    CloseButton,    Popover,    PopoverButton,    PopoverPanel,    useClose,} from '@headlessui/react';import { ChevronDown, ChevronUp, X } from "lucide-react"import cn from "classnames";import {usePanel} from "@/hooks/use-panel";import {colorMap} from "@/data/color-settings";interface FilterPopoverProps {    label: string    icon?: React.ReactNode    isSelected?: boolean    children: React.ReactNode    onClear?: () => void    selectedLabel?: string    }export function FilterPopover({ label, isSelected, children, onClear,icon, selectedLabel }: FilterPopoverProps) {    const [isOpen, setIsOpen] = useState(false);    const close = useClose();    const { selectedColor } = usePanel();        return (        <Popover className="relative">            <PopoverButton                className={cn(                    "bg-white flex items-center justify-between gap-2 px-4 py-2 rounded-full text-sm  transition-colors",                    "border focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-200  hover:border-neutral-500",                    isOpen && `bg-white  ${colorMap[selectedColor].border}`,                    isSelected                        ? `bg-white  ${colorMap[selectedColor].border}`                        : "border-neutral-300 dark:border-neutral-700",                )}                onClick={() => setIsOpen(!isOpen)}            >                {icon && <span className="text-gray-500">{icon}</span>}                <span>{selectedLabel || label}</span>                <div className="flex items-center gap-1">                    {isSelected && onClear ? (                        <span                            className={`flex-shrink-0 w-4 h-4 rounded-full text-brand-light flex items-center justify-center cursor-pointer ${colorMap[selectedColor].bg}`}                            onClick={(e) => {                                e.stopPropagation()                                onClear()                            }}                        >                            <X className="h-3 w-3 "/>                        </span>                    ) : (                        <ChevronDown className="h-4 w-4"/>                    )                    }                                </div>            </PopoverButton>            <PopoverPanel                transition                anchor="bottom"                onFocus={() => setIsOpen(true)}                onBlur={() => setIsOpen(false)}                className="absolute z-10 mt-2 w-80 rounded-lg bg-white shadow-lg ring-1 ring-border-base ring-opacity-5">                                <div className="relative flex flex-col px-5 py-6 space-y-5">                    {children}                </div>                <div                    className="px-5 py-4 bg-neutral-50 dark:bg-neutral-900 dark:border-t dark:border-neutral-800 flex items-center justify-between">                    <button                        onClick={() => {                            onClear?.()                        }}                        className={cn(                            colorMap[selectedColor].hoverBorder,                            colorMap[selectedColor].hoverLink,                            "bg-white text-brand-dark font-medium text-sm border px-4 py-2 rounded-md border-gray-400 px-5")}                    >                        Clear                    </button>                    <CloseButton                        type="button"                        onClick={() => {                            close()                            setIsOpen(false)                        }}                        className={cn(                            "text-white px-4 py-2 bg-brand-dark border border-brand-dark hover:bg-brand-dark/90 font-medium rounded-md text-sm ")}                    >                        Apply                    </CloseButton>                                </div>            </PopoverPanel>        </Popover>    )}